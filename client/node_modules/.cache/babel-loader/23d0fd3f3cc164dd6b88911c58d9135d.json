{"ast":null,"code":"var _jsxFileName = \"/Users/vmeset/React/project01/client/src/pages/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport _ from 'lodash';\nimport { Button, Container, ListGroup } from 'react-bootstrap';\nimport { Context } from '..';\nimport { fetchNotes } from '../http/noteAPI';\nimport Forma from '../components/Forma';\nimport Note from '../components/Note';\nimport SortBlock from '../components/SortBlock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = observer(_c = _s(() => {\n  _s();\n\n  const {\n    note\n  } = useContext(Context);\n  const {\n    user\n  } = useContext(Context);\n  const {\n    pathname\n  } = useLocation();\n  useEffect(() => {\n    fetchNotes(user.user.username, 1, 9).then(data => {\n      note.setNotes(data);\n    });\n  }, []);\n  let filterNotes = [];\n  let listTitle = \"Список задач\";\n\n  switch (pathname.slice(1)) {\n    case 'done':\n      filterNotes = note.notes.filter(note => note.isCompleted);\n      listTitle = \"Выполненные задачи\";\n      break;\n\n    case 'todo':\n      filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false);\n      listTitle = \"Поставленные задачи\";\n      break;\n\n    case '':\n      filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false);\n      listTitle = \"Поставленные задачи\";\n      break;\n\n    case 'buy':\n      filterNotes = note.notes.filter(note => note.type === 'buy' && note.isCompleted === false);\n      listTitle = \"Покупки\";\n      break;\n\n    default:\n      filterNotes = note.notes;\n  } // const [sort, setSort] = useState('asc')\n  // const onSort = (type) => {\n  //     const copyNotes = filterNotes.concat()\n  //     const sortType = sort === 'asc' ? 'desc' : 'asc'\n  //     const orderedNotes = _.orderBy(copyNotes, type, sortType)\n  //     setSort(sortType)\n  //     filterNotes = orderedNotes\n  // }\n  // useEffect(() => {\n  //     fetchDevices(null, null, 1, 2).then(data => {\n  //         device.setDevices(data.rows)\n  //         device.setTotalCount(data.count)\n  //     })\n  // }, [])\n  // useEffect(() => {\n  //     fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n  //         device.setDevices(data.rows)\n  //         device.setTotalCount(data.count)\n  //     })\n  // }, [device.page, device.selectedType, device.selectedBrand,])\n  // useEffect(() => {\n  //     check().then(data => {\n  //       if(data) {\n  //         user.setIsAuth(true)\n  //         user.setUser(data)\n  //       }\n  //     }).finally(() => setIsLoading(false))\n  //   }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: listTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Forma, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SortBlock, {\n      notes: filterNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: filterNotes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        notka: note\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 42\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}, \"GSUI65gabtRQ7b5NYoLCrLHSQXY=\", false, function () {\n  return [useLocation];\n}));\n_c2 = List;\nexport default List;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"List$observer\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"sources":["/Users/vmeset/React/project01/client/src/pages/List.js"],"names":["React","useState","useContext","useEffect","useLocation","observer","_","Button","Container","ListGroup","Context","fetchNotes","Forma","Note","SortBlock","List","note","user","pathname","username","then","data","setNotes","filterNotes","listTitle","slice","notes","filter","isCompleted","type","map","_id"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport _ from 'lodash';\n\nimport { Button, Container, ListGroup } from 'react-bootstrap';\n\nimport { Context } from '..';\nimport { fetchNotes } from '../http/noteAPI';\nimport Forma from '../components/Forma'\nimport Note from '../components/Note';\nimport SortBlock from '../components/SortBlock';\n\nconst List = observer ( () => {\n\n    const {note} = useContext(Context)\n    const {user} = useContext(Context)\n    const {pathname} = useLocation()\n\n    useEffect(() => {\n        fetchNotes(user.user.username, 1, 9).then(data => {\n            note.setNotes(data)\n        })\n    }, [])\n\n    let filterNotes = []\n    let listTitle = \"Список задач\"\n\n    switch(pathname.slice(1)) {\n        case 'done':\n            filterNotes = note.notes.filter(note => note.isCompleted)\n            listTitle = \"Выполненные задачи\"\n            break;\n        case 'todo':\n            filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false)\n            listTitle = \"Поставленные задачи\"\n            break;\n        case '':\n            filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false)\n            listTitle = \"Поставленные задачи\"\n            break;\n        case 'buy':\n            filterNotes = note.notes.filter(note => note.type === 'buy' && note.isCompleted === false)\n            listTitle = \"Покупки\"\n            break;\n        default:\n            filterNotes = note.notes\n    }\n\n    // const [sort, setSort] = useState('asc')\n\n    // const onSort = (type) => {\n    //     const copyNotes = filterNotes.concat()\n    //     const sortType = sort === 'asc' ? 'desc' : 'asc'\n    //     const orderedNotes = _.orderBy(copyNotes, type, sortType)\n    //     setSort(sortType)\n    //     filterNotes = orderedNotes\n    // }\n\n    // useEffect(() => {\n    //     fetchDevices(null, null, 1, 2).then(data => {\n    //         device.setDevices(data.rows)\n    //         device.setTotalCount(data.count)\n    //     })\n    // }, [])\n\n    // useEffect(() => {\n    //     fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n    //         device.setDevices(data.rows)\n    //         device.setTotalCount(data.count)\n    //     })\n    // }, [device.page, device.selectedType, device.selectedBrand,])\n\n    // useEffect(() => {\n    //     check().then(data => {\n    //       if(data) {\n    //         user.setIsAuth(true)\n    //         user.setUser(data)\n    //       }\n    //     }).finally(() => setIsLoading(false))\n    //   }, [])\n\n    return (\n        <Container>\n            <h4>\n                {listTitle}\n            </h4>\n            <Forma />\n            {/* <Button onClick={onSort}>\n                butt\n            </Button> */}\n            <SortBlock notes={filterNotes} />\n            <ListGroup>\n                {filterNotes.map(note => <Note key={note._id} notka={note} />)}\n            </ListGroup>\n        </Container>\n    );\n});\n\nexport default List;"]},"metadata":{},"sourceType":"module"}