{"ast":null,"code":"var _jsxFileName = \"/Users/vmeset/React/project01/client/src/pages/List.js\",\n    _s = $RefreshSig$();\n\nimport { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { Container, ListGroup } from 'react-bootstrap';\nimport { Context } from '..';\nimport Note from '../components/Note';\nimport { fetchNotes } from '../http/noteAPI';\nimport Forma from '../components/Forma';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = observer(_c = _s(() => {\n  _s();\n\n  const {\n    note\n  } = useContext(Context);\n  const {\n    user\n  } = useContext(Context);\n  useEffect(() => {\n    fetchNotes().then(data => {\n      const myNotes = data.filter(note => note.author !== user.user.username);\n      console.log(user.user.username);\n      note.setNotes(myNotes);\n    });\n  }, []); // useEffect(() => {\n  //     check().then(data => {\n  //       if(data) {\n  //         user.setIsAuth(true)\n  //         user.setUser(data)\n  //       }\n  //     }).finally(() => setIsLoading(false))\n  //   }, [])\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Forma, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: note.notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 41\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}, \"z6h920Y+Hct48xhyFBiYRtd5/Lk=\"));\n_c2 = List;\nexport default List;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"List$observer\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"sources":["/Users/vmeset/React/project01/client/src/pages/List.js"],"names":["observer","React","useContext","useEffect","Container","ListGroup","Context","Note","fetchNotes","Forma","List","note","user","then","data","myNotes","filter","author","username","console","log","setNotes","notes","map","_id"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,iBAAzB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,iBAArC;AACA,SAASC,OAAT,QAAwB,IAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAEA,MAAMC,IAAI,GAAGV,QAAQ,SAAG,MAAM;AAAA;;AAE1B,QAAM;AAACW,IAAAA;AAAD,MAAST,UAAU,CAACI,OAAD,CAAzB;AACA,QAAM;AAACM,IAAAA;AAAD,MAASV,UAAU,CAACI,OAAD,CAAzB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,UAAU,GAAGK,IAAb,CAAkBC,IAAI,IAAI;AACtB,YAAMC,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAYL,IAAI,IAAIA,IAAI,CAACM,MAAL,KAAgBL,IAAI,CAACA,IAAL,CAAUM,QAA9C,CAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACA,IAAL,CAAUM,QAAtB;AAEAP,MAAAA,IAAI,CAACU,QAAL,CAAcN,OAAd;AACH,KALD;AAMH,GAPQ,EAON,EAPM,CAAT,CAL0B,CAc1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI,QAAC,SAAD;AAAA,4BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAA,gBACKJ,IAAI,CAACW,KAAL,CAAWC,GAAX,CAAeZ,IAAI,iBAAI,QAAC,IAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAWA,IAAI,CAACa,GAAhB;AAAA;AAAA;AAAA;AAAA,cAAvB;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA/BoB,kCAArB;MAAMd,I;AAiCN,eAAeA,IAAf","sourcesContent":["import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport { Container, ListGroup } from 'react-bootstrap';\nimport { Context } from '..';\nimport Note from '../components/Note';\nimport { fetchNotes } from '../http/noteAPI';\nimport Forma from '../components/Forma'\n\nconst List = observer ( () => {\n\n    const {note} = useContext(Context)\n    const {user} = useContext(Context)\n\n    useEffect(() => {\n        fetchNotes().then(data => {\n            const myNotes = data.filter(note => note.author !== user.user.username)\n            console.log(user.user.username)\n\n            note.setNotes(myNotes)\n        })\n    }, [])\n\n    // useEffect(() => {\n    //     check().then(data => {\n    //       if(data) {\n    //         user.setIsAuth(true)\n    //         user.setUser(data)\n    //       }\n    //     }).finally(() => setIsLoading(false))\n    //   }, [])\n\n    return (\n        <Container>\n            <Forma />\n            <ListGroup>\n                {note.notes.map(note => <Note key={note._id} note={note} />)}\n            </ListGroup>\n        </Container>\n    );\n});\n\nexport default List;"]},"metadata":{},"sourceType":"module"}