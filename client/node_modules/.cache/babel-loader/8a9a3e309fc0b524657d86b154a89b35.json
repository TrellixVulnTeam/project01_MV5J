{"ast":null,"code":"var _jsxFileName = \"/Users/vmeset/React/project01/client/src/pages/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport _ from 'lodash';\nimport { Button, Container, ListGroup } from 'react-bootstrap';\nimport { Context } from '..';\nimport { fetchNotes } from '../http/noteAPI';\nimport Forma from '../components/Forma';\nimport Note from '../components/Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = observer(_c = _s(() => {\n  _s();\n\n  const {\n    note\n  } = useContext(Context);\n  const {\n    user\n  } = useContext(Context);\n  const {\n    pathname\n  } = useLocation();\n  useEffect(() => {\n    fetchNotes(user.user.username, 1, 9).then(data => {\n      note.setNotes(data);\n    });\n  }, []); // let filterNotes = []\n\n  const [usNotes, setUsNotes] = useState([]);\n  let listTitle = \"Список задач\";\n\n  switch (pathname.slice(1)) {\n    case 'done':\n      filterNotes = note.notes.filter(note => note.isCompleted);\n      listTitle = \"Выполненные задачи\";\n      break;\n\n    case 'todo':\n      filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false);\n      listTitle = \"Поставленные задачи\";\n      break;\n\n    case '':\n      filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false);\n      listTitle = \"Поставленные задачи\";\n      break;\n\n    case 'buy':\n      filterNotes = note.notes.filter(note => note.type === 'buy' && note.isCompleted === false);\n      listTitle = \"Покупки\";\n      break;\n\n    default:\n      filterNotes = note.notes;\n  }\n\n  const [sort, setSort] = useState('asc');\n\n  const onSort = type => {\n    const copyNotes = filterNotes.concat();\n    const sortType = sort === 'asc' ? 'desc' : 'asc';\n\n    const orderedNotes = _.orderBy(copyNotes, type, sortType);\n\n    setSort(sortType);\n    setUsNotes(orderedNotes);\n  }; // useEffect(() => {\n  //     fetchDevices(null, null, 1, 2).then(data => {\n  //         device.setDevices(data.rows)\n  //         device.setTotalCount(data.count)\n  //     })\n  // }, [])\n  // useEffect(() => {\n  //     fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n  //         device.setDevices(data.rows)\n  //         device.setTotalCount(data.count)\n  //     })\n  // }, [device.page, device.selectedType, device.selectedBrand,])\n  // useEffect(() => {\n  //     check().then(data => {\n  //       if(data) {\n  //         user.setIsAuth(true)\n  //         user.setUser(data)\n  //       }\n  //     }).finally(() => setIsLoading(false))\n  //   }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: listTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Forma, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onSort,\n      children: \"butt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: filterNotes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        notka: note\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 42\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}, \"8jh7kuRRtbaCEvcn/VT1etw0cjo=\", false, function () {\n  return [useLocation];\n}));\n_c2 = List;\nexport default List;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"List$observer\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"sources":["/Users/vmeset/React/project01/client/src/pages/List.js"],"names":["React","useState","useContext","useEffect","useLocation","observer","_","Button","Container","ListGroup","Context","fetchNotes","Forma","Note","List","note","user","pathname","username","then","data","setNotes","usNotes","setUsNotes","listTitle","slice","filterNotes","notes","filter","isCompleted","type","sort","setSort","onSort","copyNotes","concat","sortType","orderedNotes","orderBy","map","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,SAA5B,QAA6C,iBAA7C;AAEA,SAASC,OAAT,QAAwB,IAAxB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,MAAMC,IAAI,GAAGT,QAAQ,SAAG,MAAM;AAAA;;AAE1B,QAAM;AAACU,IAAAA;AAAD,MAASb,UAAU,CAACQ,OAAD,CAAzB;AACA,QAAM;AAACM,IAAAA;AAAD,MAASd,UAAU,CAACQ,OAAD,CAAzB;AACA,QAAM;AAACO,IAAAA;AAAD,MAAab,WAAW,EAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,UAAU,CAACK,IAAI,CAACA,IAAL,CAAUE,QAAX,EAAqB,CAArB,EAAwB,CAAxB,CAAV,CAAqCC,IAArC,CAA0CC,IAAI,IAAI;AAC9CL,MAAAA,IAAI,CAACM,QAAL,CAAcD,IAAd;AAEH,KAHD;AAIH,GALQ,EAKN,EALM,CAAT,CAN0B,CAa1B;;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAIuB,SAAS,GAAG,cAAhB;;AAEA,UAAOP,QAAQ,CAACQ,KAAT,CAAe,CAAf,CAAP;AACI,SAAK,MAAL;AACIC,MAAAA,WAAW,GAAGX,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkBb,IAAI,IAAIA,IAAI,CAACc,WAA/B,CAAd;AACAL,MAAAA,SAAS,GAAG,oBAAZ;AACA;;AACJ,SAAK,MAAL;AACIE,MAAAA,WAAW,GAAGX,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkBb,IAAI,IAAIA,IAAI,CAACe,IAAL,KAAc,MAAd,IAAwBf,IAAI,CAACc,WAAL,KAAqB,KAAvE,CAAd;AACAL,MAAAA,SAAS,GAAG,qBAAZ;AACA;;AACJ,SAAK,EAAL;AACIE,MAAAA,WAAW,GAAGX,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkBb,IAAI,IAAIA,IAAI,CAACe,IAAL,KAAc,MAAd,IAAwBf,IAAI,CAACc,WAAL,KAAqB,KAAvE,CAAd;AACAL,MAAAA,SAAS,GAAG,qBAAZ;AACA;;AACJ,SAAK,KAAL;AACIE,MAAAA,WAAW,GAAGX,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkBb,IAAI,IAAIA,IAAI,CAACe,IAAL,KAAc,KAAd,IAAuBf,IAAI,CAACc,WAAL,KAAqB,KAAtE,CAAd;AACAL,MAAAA,SAAS,GAAG,SAAZ;AACA;;AACJ;AACIE,MAAAA,WAAW,GAAGX,IAAI,CAACY,KAAnB;AAlBR;;AAqBA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkB/B,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMgC,MAAM,GAAIH,IAAD,IAAU;AACrB,UAAMI,SAAS,GAAGR,WAAW,CAACS,MAAZ,EAAlB;AACA,UAAMC,QAAQ,GAAGL,IAAI,KAAK,KAAT,GAAiB,MAAjB,GAA0B,KAA3C;;AACA,UAAMM,YAAY,GAAG/B,CAAC,CAACgC,OAAF,CAAUJ,SAAV,EAAqBJ,IAArB,EAA2BM,QAA3B,CAArB;;AACAJ,IAAAA,OAAO,CAACI,QAAD,CAAP;AACAb,IAAAA,UAAU,CAACc,YAAD,CAAV;AACH,GAND,CAxC0B,CAgD1B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAA,gBACKb;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAES,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAQI,QAAC,SAAD;AAAA,gBACKP,WAAW,CAACa,GAAZ,CAAgBxB,IAAI,iBAAI,QAAC,IAAD;AAAqB,QAAA,KAAK,EAAEA;AAA5B,SAAWA,IAAI,CAACyB,GAAhB;AAAA;AAAA;AAAA;AAAA,cAAxB;AADL;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CArFoB;AAAA,UAIEpC,WAJF;AAAA,GAArB;MAAMU,I;AAuFN,eAAeA,IAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport _ from 'lodash';\n\nimport { Button, Container, ListGroup } from 'react-bootstrap';\n\nimport { Context } from '..';\nimport { fetchNotes } from '../http/noteAPI';\nimport Forma from '../components/Forma'\nimport Note from '../components/Note';\n\nconst List = observer ( () => {\n\n    const {note} = useContext(Context)\n    const {user} = useContext(Context)\n    const {pathname} = useLocation()\n\n    useEffect(() => {\n        fetchNotes(user.user.username, 1, 9).then(data => {\n            note.setNotes(data)\n            \n        })\n    }, [])\n\n    // let filterNotes = []\n    const [usNotes, setUsNotes] = useState([])\n    let listTitle = \"Список задач\"\n\n    switch(pathname.slice(1)) {\n        case 'done':\n            filterNotes = note.notes.filter(note => note.isCompleted)\n            listTitle = \"Выполненные задачи\"\n            break;\n        case 'todo':\n            filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false)\n            listTitle = \"Поставленные задачи\"\n            break;\n        case '':\n            filterNotes = note.notes.filter(note => note.type === 'todo' && note.isCompleted === false)\n            listTitle = \"Поставленные задачи\"\n            break;\n        case 'buy':\n            filterNotes = note.notes.filter(note => note.type === 'buy' && note.isCompleted === false)\n            listTitle = \"Покупки\"\n            break;\n        default:\n            filterNotes = note.notes\n    }\n\n    const [sort, setSort] = useState('asc')\n\n    const onSort = (type) => {\n        const copyNotes = filterNotes.concat()\n        const sortType = sort === 'asc' ? 'desc' : 'asc'\n        const orderedNotes = _.orderBy(copyNotes, type, sortType)\n        setSort(sortType)\n        setUsNotes(orderedNotes)\n    }\n\n    // useEffect(() => {\n    //     fetchDevices(null, null, 1, 2).then(data => {\n    //         device.setDevices(data.rows)\n    //         device.setTotalCount(data.count)\n    //     })\n    // }, [])\n\n    // useEffect(() => {\n    //     fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n    //         device.setDevices(data.rows)\n    //         device.setTotalCount(data.count)\n    //     })\n    // }, [device.page, device.selectedType, device.selectedBrand,])\n\n    // useEffect(() => {\n    //     check().then(data => {\n    //       if(data) {\n    //         user.setIsAuth(true)\n    //         user.setUser(data)\n    //       }\n    //     }).finally(() => setIsLoading(false))\n    //   }, [])\n\n    return (\n        <Container>\n            <h4>\n                {listTitle}\n            </h4>\n            <Forma />\n            <Button onClick={onSort}>\n                butt\n            </Button>\n            <ListGroup>\n                {filterNotes.map(note => <Note key={note._id} notka={note} />)}\n            </ListGroup>\n        </Container>\n    );\n});\n\nexport default List;"]},"metadata":{},"sourceType":"module"}